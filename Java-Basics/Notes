1. public static void main(String[] args) meaning 
public: So that JVM can execute the method from anywhere.
static: The main method is to be called without an object. The modifiers public and static can be written in either order.
void: The main method doesn't return anything.
main(): Name configured in the JVM. The main method must be inside the class definition. The compiler executes the codes starting always from the main function.
String[]: The main method accepts a single argument, i.e., an array of elements of type String.

*********************************************************************************************************************************************************************

2. System.out.println("Hello, World");

This line outputs the string "Hello, World" followed by a new line on the screen

System : It is a predefined class in java.lang package 
out : It is a reference of type PrintStream(class)
println(String s) : a built-in method inside PrintStream class called using out object accepts various kinds of arguments(overloaded method).  

*********************************************************************************************************************************************************************

3. Hello.java has public Hello class (file name == class name)

javac Hello.java >> Hello.class file is created in current working directory
java Hello >> runs the class file

Hello.java has World class without public modifier (file name != class name)

javac Hello.java >> World.class file is created in current working directory
java World >> runs the class file

*********************************************************************************************************************************************************************

We can overload main method 
We cannot override main method 
We can only have one public class in java file which has a main method 

*********************************************************************************************************************************************************************

Naming Convention 

Class : Noun >>> example :- Add2Numbers, ReverseString
Interface : Adjective >> example :- Readable
method : Verb >> example :- run, print, search
constants : PI,MAX_VALLUE,MIN_VALUE,MAX_INT
package : name should be always in small like lang,util, etc
variables : small case words like marks , etc

********************************************************************************************************************************************************************

In which case the finally block will not execute 

        try{
            System.exit(0);
        }
        finally{
            System.out.println("Inside finally block");
        }  
        
********************************************************************************************************************************************************************
      
Java Auto Boxing and Unboxing

int x1 =10;
Integer x2 = x1; // auto-boxing (converting primitive to object)
int x3 = x2; // auto-unboxing (converting object to primitive)

*********************************************************************************************************************************************************************

Type Conversion in Java 

Widening or Implicit Conversion

byte << short << int << long << float << double 

char << int <<....

only confusion is with long and float 

long stores 64 bit where as float stores 32 bits but float stores exponents separately so we migth loose on some precision but over all it can hold long

Narrowing or Explicit conversion

double d = 2.5;
int i = (int) d;

it can also be done in non-primitive types which is called upcasting or downcasting.
will see this later.

**********************************************************************************************************************************************************************

while(i<10); == while(i<10){;}
//this will run infinite times

***********************************************************************************************************************************************************************

public class Main {
    public static void main(String[] args) {
    Test t = new Test(); //gives compile time error we need to create one no-arg constructor
    }
}

class Test{
    Test(int a){

    }
}

***********************************************************************************************************************************************************************


Static Member in Java

→ Static membex can be accessed without creating

an object.

→ Static methods cannot access non-static member.

Non-Static methods Can access static members

Static methods do not have access to this reference 
