1. public static void main(String[] args) meaning 
public: So that JVM can execute the method from anywhere.
static: The main method is to be called without an object. The modifiers public and static can be written in either order.
void: The main method doesn't return anything.
main(): Name configured in the JVM. The main method must be inside the class definition. The compiler executes the codes starting always from the main function.
String[]: The main method accepts a single argument, i.e., an array of elements of type String.

*********************************************************************************************************************************************************************

2. System.out.println("Hello, World");

This line outputs the string "Hello, World" followed by a new line on the screen

System : It is a predefined class in java.lang package 
out : It is a reference of type PrintStream(class)
println(String s) : a built-in method inside PrintStream class called using out reference accepts various kinds of arguments(overloaded method).  

*********************************************************************************************************************************************************************

3. Hello.java has public Hello class (file name == class name)

javac Hello.java >> Hello.class file is created in current working directory
java Hello >> runs the class file

Hello.java has World class without public modifier (file name != class name)

javac Hello.java >> World.class file is created in current working directory
java World >> runs the class file

*********************************************************************************************************************************************************************

We can overload main method 
We cannot override main method 
We can only have one public class in java file which has a main method 
If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.

Example Superclass class A defined a method whose access modifier is protected. 
While doing method overriding in SubClass Class B we didn’t define any access modifier so 
Default access modifier will be used. By the rule, Default is more restricted then Protected 
so this program will give compile time error. Instead of default, we could’ve used public which is less restricted then protected.

Access modifier restrictions in decreasing order:

private
default
protected
public
i.e. private is more restricted then default and default is more restricted than protected and so on.

*********************************************************************************************************************************************************************

Naming Convention 

Class : Noun >>> example :- Add2Numbers, ReverseString
Interface : Adjective >> example :- Readable
method : Verb >> example :- run, print, search
constants : PI,MAX_VALLUE,MIN_VALUE,MAX_INT
package : name should be always in small like lang,util, etc
variables : small case words like marks , etc

********************************************************************************************************************************************************************

In which case the finally block will not execute 

        try{
            System.exit(0);
        }
        finally{
            System.out.println("Inside finally block");
        }  
        
********************************************************************************************************************************************************************
      
Java Auto Boxing and Unboxing

int x1 =10;
Integer x2 = x1; // auto-boxing (converting primitive to object)
int x3 = x2; // auto-unboxing (converting object to primitive)

*********************************************************************************************************************************************************************

Type Conversion in Java 

Widening or Implicit Conversion

byte << short << int << long << float << double 

char << int <<....

only confusion is with long and float 

long stores 64 bit where as float stores 32 bits but float stores exponents separately so we migth loose on some precision but over all it can hold long

Narrowing or Explicit conversion

double d = 2.5;
int i = (int) d;

it can also be done in non-primitive types which is called upcasting or downcasting.
will see this later.

**********************************************************************************************************************************************************************
int i = 0;
while(i<10); == while(i<10){;}
//this will run infinite times

***********************************************************************************************************************************************************************

public class Main {
    public static void main(String[] args) {
    Test t = new Test(); //gives compile time error we need to create one no-arg constructor
    }
}

class Test{
    Test(int a){

    }
}

***********************************************************************************************************************************************************************


Static Member in Java

→ Static membex can be accessed without creating an object.

→ Static methods cannot access non-static member.

→ Non-Static methods Can access static members

→ Static methods do not have access to this reference 

*******************************************************************************************************************************************************************

Final Keyword in Java
1. Variable (local, instance or class) No re-initialization
2. methods : No overridding
3. Class : No inheritence 

final variables need not to be initialized at the time of declaration.
******************************************************************************************************************************************************************

static{} block is class level //before main method 
initializer{} block is instance level //before constructor

******************************************************************************************************************************************************************

All checked Exceptions must be thrown using throws keyword in method signature in order to compile the code successfully.
or else it can be caught using try catch just like normal runtime(unchecked) exceptions 

******************************************************************************************************************************************************************

int[] arr = new int[0]; // compiles and runs successfully
int[] arr = new int[-5]; // gives NegativeArraySizeException at runtime

********************************************************************************************************************************************************************

Synchronization in java is the capability to control the access of multiple threads to any shared resource.
Synchronized access means it is thread-safe. So different threads can access the collection concurrently
without any problems, but it is probably a little bit slower depending on what you are doing. 

Unsynchronized is the opposite. Not thread-safe, but a little bit faster.
Implementation of ArrayList is not synchronized by default. It means if a thread modifies it
structurally and multiple threads access it concurrently, it must be synchronized externally.

********************************************************************************************************************************************************************

static variables are declared using the static keyword within a class outside any method, constructor, or block.

*******************************************************************************************************************************************************************

int arr[] = {1,2,3};      
int brr[] = arr.clone();

*******************************************************************************************************************************************************************

Deep Copy = two different references points to seperate individual copy of object //two diff address 2 ref
Shallow Copy = two diffrerent refrences points to same object //one address and 2 ref

********************************************************************************************************************************************************************

use == operators for reference comparison (address comparison) ie (== checks whether both objects point to the same memory location whereas)
.equals() method for content comparison ie .equals() evaluates the comparison of values in the objects.

********************************************************************************************************************************************************************
String s1 = "Hello";
String s2 = s1.concat("World");
Sout(s1); // Hello

concat method returns a String Object.
as Strings are immutable in Java S1 is not changed here.
*******************************************************************************************************************************************************************

As applications grow, it's very common for String literals to occupy large area of memory, which can even cause redundancy. 
So, in order to make Java more efficient, the JVM sets aside a special area of memory called the "String constant pool".


When the compiler sees a String literal, it looks for the String in the pool. If a match is found, 
the reference to the new literal is directed to the existing String and no new String object is created. 
The existing String simply has one more reference. Here comes the point of making String objects immutable:


In the String constant pool, a String object is likely to have one or more references. 
If several references point to the same String without even knowing it, it would be bad if one of the
references modify that String value. That's why String objects are immutable.


Well, now you could say, what if someone overrides the functionality of String class? 
That's the reason that the String class is marked final so that nobody can override the behavior of its methods.

********************************************************************************************************************************************************************

Encapsulation :- 

making state or fields of class as private and accessing them only using getters and setters method.
we can also apply validations while setting any value or we can set restrictions like a field 
is read only and we cannot write it by only exposing getter method on it.
ie Wrapping up of data members and member functions in a class for security purpose. 

fields >> private 
Getter/Setters >> public

*****************************************************************************************************************************************************************

Child obj = new Child();
obj can access 
1. public methods of Parent class
2. Instance methods of Child class
3. Overridden method of Parent class in child class

Parent obj = new Child(); //called upcasting 
obj can access 
1. methods of Parent class 
2. Overridden method in Child class 
3. The methods which is exclusively in child class are not accessible

Parent obj = new Parent();
only methods of Parent class are accessible

* whenever we create an object of child class the default constructor of parent class is invoked before invoking constructor of child class

*****************************************************************************************************************************************************************
Abstraction 

Arrays.sort(arr);
here we use the functionality of sort without knowing the internal implementation details of the sort function. 
whether it is using quick sort or bubble who cares.

By using Interface and abstract class we can use abstraction
******************************************************************************************************************************************************************

Encapsulation vs Data Abstraction

Encapsulation is data hiding(information hiding) while Abstraction is detail hiding(implementation hiding).
While encapsulation groups together the data and the methods that act upon the data, 
data abstraction deals with exposing the interface to the user and hiding the details of the implementation.

*****************************************************************************************************************************************************************

An abstract class can have zero or more abstract methods 
if a class has any one abstract method than the class should be marked as Abstract otherwise it will give compile time error.

*****************************************************************************************************************************************************************

Can we override static method?
We can not override the static method because static methods do not belong to objects, it resides in the 
Class memory area and We can not override class methods as they are shared among all the objects.

Why we have constructors in Abstract class?
An abstract class can have parametrized constructors and the default constructor is always present in an abstract class.
The constructor inside the abstract class can only be called during constructor chaining i.e. when we create an instance of sub-classes.
This is also one of the reasons abstract class can have a constructor.

Why we do not have constructors in Interface?
An Interface in Java doesn't have a constructor because all data members in interfaces are public static final by default, they are constants (assign the values at the time of declaration). 
There are no data members in an interface to initialize them through the constructor.
*****************************************************************************************************************************************************************

How we can access Private data members of a class?
Using inner class 
Or by inheriting the inner class of the Outer class

******************************************************************************************************************************************************************

we can't write any constructor for anonymous Inner class because the anonymous class
does not have any name and while defining constructor class name and constructor name must be same.
